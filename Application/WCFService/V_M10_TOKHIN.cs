//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace KyoeiSystem.Application.WCFService
{
    [DataContract(IsReference = true)]
    public partial class V_M10_TOKHIN: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
        [DataMember]
        public int 取引先コード
        {
            get { return _取引先コード; }
            set
            {
                if (_取引先コード != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property '取引先コード' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _取引先コード = value;
                    OnPropertyChanged("取引先コード");
                }
            }
        }
        private int _取引先コード;
    
        [DataMember]
        public int 枝番
        {
            get { return _枝番; }
            set
            {
                if (_枝番 != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property '枝番' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _枝番 = value;
                    OnPropertyChanged("枝番");
                }
            }
        }
        private int _枝番;
    
        [DataMember]
        public int 品番コード
        {
            get { return _品番コード; }
            set
            {
                if (_品番コード != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property '品番コード' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _品番コード = value;
                    OnPropertyChanged("品番コード");
                }
            }
        }
        private int _品番コード;
    
        [DataMember]
        public string 得意先名１
        {
            get { return _得意先名１; }
            set
            {
                if (_得意先名１ != value)
                {
                    _得意先名１ = value;
                    OnPropertyChanged("得意先名１");
                }
            }
        }
        private string _得意先名１;
    
        [DataMember]
        public string 得意先品番コード
        {
            get { return _得意先品番コード; }
            set
            {
                if (_得意先品番コード != value)
                {
                    _得意先品番コード = value;
                    OnPropertyChanged("得意先品番コード");
                }
            }
        }
        private string _得意先品番コード;
    
        [DataMember]
        public string 自社品番
        {
            get { return _自社品番; }
            set
            {
                if (_自社品番 != value)
                {
                    _自社品番 = value;
                    OnPropertyChanged("自社品番");
                }
            }
        }
        private string _自社品番;
    
        [DataMember]
        public string 自社色
        {
            get { return _自社色; }
            set
            {
                if (_自社色 != value)
                {
                    _自社色 = value;
                    OnPropertyChanged("自社色");
                }
            }
        }
        private string _自社色;
    
        [DataMember]
        public string 自社品名
        {
            get { return _自社品名; }
            set
            {
                if (_自社品名 != value)
                {
                    _自社品名 = value;
                    OnPropertyChanged("自社品名");
                }
            }
        }
        private string _自社品名;
    
        [DataMember]
        public string 色名称
        {
            get { return _色名称; }
            set
            {
                if (_色名称 != value)
                {
                    _色名称 = value;
                    OnPropertyChanged("色名称");
                }
            }
        }
        private string _色名称;
    
        [DataMember]
        public Nullable<decimal> 得意先売価
        {
            get { return _得意先売価; }
            set
            {
                if (_得意先売価 != value)
                {
                    _得意先売価 = value;
                    OnPropertyChanged("得意先売価");
                }
            }
        }
        private Nullable<decimal> _得意先売価;
    
        [DataMember]
        public Nullable<decimal> 仕入先売価
        {
            get { return _仕入先売価; }
            set
            {
                if (_仕入先売価 != value)
                {
                    _仕入先売価 = value;
                    OnPropertyChanged("仕入先売価");
                }
            }
        }
        private Nullable<decimal> _仕入先売価;
    
        [DataMember]
        public Nullable<decimal> 外注先売価
        {
            get { return _外注先売価; }
            set
            {
                if (_外注先売価 != value)
                {
                    _外注先売価 = value;
                    OnPropertyChanged("外注先売価");
                }
            }
        }
        private Nullable<decimal> _外注先売価;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}

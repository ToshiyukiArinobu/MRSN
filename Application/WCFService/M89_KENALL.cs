//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace KyoeiSystem.Application.WCFService
{
    [DataContract(IsReference = true)]
    public partial class M89_KENALL: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
        [DataMember]
        public int 郵便番号ID
        {
            get { return _郵便番号ID; }
            set
            {
                if (_郵便番号ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property '郵便番号ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _郵便番号ID = value;
                    OnPropertyChanged("郵便番号ID");
                }
            }
        }
        private int _郵便番号ID;
    
        [DataMember]
        public string 郵便番号
        {
            get { return _郵便番号; }
            set
            {
                if (_郵便番号 != value)
                {
                    _郵便番号 = value;
                    OnPropertyChanged("郵便番号");
                }
            }
        }
        private string _郵便番号;
    
        [DataMember]
        public string 住所かな１
        {
            get { return _住所かな１; }
            set
            {
                if (_住所かな１ != value)
                {
                    _住所かな１ = value;
                    OnPropertyChanged("住所かな１");
                }
            }
        }
        private string _住所かな１;
    
        [DataMember]
        public string 住所かな２
        {
            get { return _住所かな２; }
            set
            {
                if (_住所かな２ != value)
                {
                    _住所かな２ = value;
                    OnPropertyChanged("住所かな２");
                }
            }
        }
        private string _住所かな２;
    
        [DataMember]
        public string 住所かな３
        {
            get { return _住所かな３; }
            set
            {
                if (_住所かな３ != value)
                {
                    _住所かな３ = value;
                    OnPropertyChanged("住所かな３");
                }
            }
        }
        private string _住所かな３;
    
        [DataMember]
        public string 住所１
        {
            get { return _住所１; }
            set
            {
                if (_住所１ != value)
                {
                    _住所１ = value;
                    OnPropertyChanged("住所１");
                }
            }
        }
        private string _住所１;
    
        [DataMember]
        public string 住所２
        {
            get { return _住所２; }
            set
            {
                if (_住所２ != value)
                {
                    _住所２ = value;
                    OnPropertyChanged("住所２");
                }
            }
        }
        private string _住所２;
    
        [DataMember]
        public string 住所３
        {
            get { return _住所３; }
            set
            {
                if (_住所３ != value)
                {
                    _住所３ = value;
                    OnPropertyChanged("住所３");
                }
            }
        }
        private string _住所３;
    
        [DataMember]
        public Nullable<System.DateTime> 削除日付
        {
            get { return _削除日付; }
            set
            {
                if (_削除日付 != value)
                {
                    _削除日付 = value;
                    OnPropertyChanged("削除日付");
                }
            }
        }
        private Nullable<System.DateTime> _削除日付;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}

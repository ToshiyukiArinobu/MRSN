//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace KyoeiSystem.Application.WCFService
{
    [DataContract(IsReference = true)]
    public partial class M74_KGRP: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
        [DataMember]
        public int グループ権限ID
        {
            get { return _グループ権限ID; }
            set
            {
                if (_グループ権限ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'グループ権限ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _グループ権限ID = value;
                    OnPropertyChanged("グループ権限ID");
                }
            }
        }
        private int _グループ権限ID;
    
        [DataMember]
        public string プログラムID
        {
            get { return _プログラムID; }
            set
            {
                if (_プログラムID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'プログラムID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _プログラムID = value;
                    OnPropertyChanged("プログラムID");
                }
            }
        }
        private string _プログラムID;
    
        [DataMember]
        public Nullable<int> タブグループ番号
        {
            get { return _タブグループ番号; }
            set
            {
                if (_タブグループ番号 != value)
                {
                    _タブグループ番号 = value;
                    OnPropertyChanged("タブグループ番号");
                }
            }
        }
        private Nullable<int> _タブグループ番号;
    
        [DataMember]
        public Nullable<int> 使用可能FLG
        {
            get { return _使用可能FLG; }
            set
            {
                if (_使用可能FLG != value)
                {
                    _使用可能FLG = value;
                    OnPropertyChanged("使用可能FLG");
                }
            }
        }
        private Nullable<int> _使用可能FLG;
    
        [DataMember]
        public Nullable<int> データ更新FLG
        {
            get { return _データ更新FLG; }
            set
            {
                if (_データ更新FLG != value)
                {
                    _データ更新FLG = value;
                    OnPropertyChanged("データ更新FLG");
                }
            }
        }
        private Nullable<int> _データ更新FLG;
    
        [DataMember]
        public Nullable<System.DateTime> 登録日時
        {
            get { return _登録日時; }
            set
            {
                if (_登録日時 != value)
                {
                    _登録日時 = value;
                    OnPropertyChanged("登録日時");
                }
            }
        }
        private Nullable<System.DateTime> _登録日時;
    
        [DataMember]
        public Nullable<System.DateTime> 更新日時
        {
            get { return _更新日時; }
            set
            {
                if (_更新日時 != value)
                {
                    _更新日時 = value;
                    OnPropertyChanged("更新日時");
                }
            }
        }
        private Nullable<System.DateTime> _更新日時;
    
        [DataMember]
        public Nullable<System.DateTime> 削除日付
        {
            get { return _削除日付; }
            set
            {
                if (_削除日付 != value)
                {
                    _削除日付 = value;
                    OnPropertyChanged("削除日付");
                }
            }
        }
        private Nullable<System.DateTime> _削除日付;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}

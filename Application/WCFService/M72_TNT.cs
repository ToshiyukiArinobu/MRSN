//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace KyoeiSystem.Application.WCFService
{
    [DataContract(IsReference = true)]
    public partial class M72_TNT: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
        [DataMember]
        public int 担当者ID
        {
            get { return _担当者ID; }
            set
            {
                if (_担当者ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property '担当者ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _担当者ID = value;
                    OnPropertyChanged("担当者ID");
                }
            }
        }
        private int _担当者ID;
    
        [DataMember]
        public string 担当者名
        {
            get { return _担当者名; }
            set
            {
                if (_担当者名 != value)
                {
                    _担当者名 = value;
                    OnPropertyChanged("担当者名");
                }
            }
        }
        private string _担当者名;
    
        [DataMember]
        public string かな読み
        {
            get { return _かな読み; }
            set
            {
                if (_かな読み != value)
                {
                    _かな読み = value;
                    OnPropertyChanged("かな読み");
                }
            }
        }
        private string _かな読み;
    
        [DataMember]
        public string パスワード
        {
            get { return _パスワード; }
            set
            {
                if (_パスワード != value)
                {
                    _パスワード = value;
                    OnPropertyChanged("パスワード");
                }
            }
        }
        private string _パスワード;
    
        [DataMember]
        public int グループ権限ID
        {
            get { return _グループ権限ID; }
            set
            {
                if (_グループ権限ID != value)
                {
                    _グループ権限ID = value;
                    OnPropertyChanged("グループ権限ID");
                }
            }
        }
        private int _グループ権限ID;
    
        [DataMember]
        public string 個人ナンバー
        {
            get { return _個人ナンバー; }
            set
            {
                if (_個人ナンバー != value)
                {
                    _個人ナンバー = value;
                    OnPropertyChanged("個人ナンバー");
                }
            }
        }
        private string _個人ナンバー;
    
        [DataMember]
        public byte[] 設定項目
        {
            get { return _設定項目; }
            set
            {
                if (_設定項目 != value)
                {
                    _設定項目 = value;
                    OnPropertyChanged("設定項目");
                }
            }
        }
        private byte[] _設定項目;
    
        [DataMember]
        public int 自社部門ID
        {
            get { return _自社部門ID; }
            set
            {
                if (_自社部門ID != value)
                {
                    _自社部門ID = value;
                    OnPropertyChanged("自社部門ID");
                }
            }
        }
        private int _自社部門ID;
    
        [DataMember]
        public Nullable<int> 利用者コード
        {
            get { return _利用者コード; }
            set
            {
                if (_利用者コード != value)
                {
                    _利用者コード = value;
                    OnPropertyChanged("利用者コード");
                }
            }
        }
        private Nullable<int> _利用者コード;
    
        [DataMember]
        public int 自社コード
        {
            get { return _自社コード; }
            set
            {
                if (_自社コード != value)
                {
                    _自社コード = value;
                    OnPropertyChanged("自社コード");
                }
            }
        }
        private int _自社コード;
    
        [DataMember]
        public Nullable<int> 登録者
        {
            get { return _登録者; }
            set
            {
                if (_登録者 != value)
                {
                    _登録者 = value;
                    OnPropertyChanged("登録者");
                }
            }
        }
        private Nullable<int> _登録者;
    
        [DataMember]
        public Nullable<System.DateTime> 登録日時
        {
            get { return _登録日時; }
            set
            {
                if (_登録日時 != value)
                {
                    _登録日時 = value;
                    OnPropertyChanged("登録日時");
                }
            }
        }
        private Nullable<System.DateTime> _登録日時;
    
        [DataMember]
        public Nullable<int> 最終更新者
        {
            get { return _最終更新者; }
            set
            {
                if (_最終更新者 != value)
                {
                    _最終更新者 = value;
                    OnPropertyChanged("最終更新者");
                }
            }
        }
        private Nullable<int> _最終更新者;
    
        [DataMember]
        public Nullable<System.DateTime> 最終更新日時
        {
            get { return _最終更新日時; }
            set
            {
                if (_最終更新日時 != value)
                {
                    _最終更新日時 = value;
                    OnPropertyChanged("最終更新日時");
                }
            }
        }
        private Nullable<System.DateTime> _最終更新日時;
    
        [DataMember]
        public Nullable<int> 削除者
        {
            get { return _削除者; }
            set
            {
                if (_削除者 != value)
                {
                    _削除者 = value;
                    OnPropertyChanged("削除者");
                }
            }
        }
        private Nullable<int> _削除者;
    
        [DataMember]
        public Nullable<System.DateTime> 削除日時
        {
            get { return _削除日時; }
            set
            {
                if (_削除日時 != value)
                {
                    _削除日時 = value;
                    OnPropertyChanged("削除日時");
                }
            }
        }
        private Nullable<System.DateTime> _削除日時;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}

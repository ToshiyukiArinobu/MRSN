//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace KyoeiSystem.Application.WCFService
{
    [DataContract(IsReference = true)]
    public partial class M90_GRID: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Simple Properties
    
        [DataMember]
        public int 担当者ID
        {
            get { return _担当者ID; }
            set
            {
                if (_担当者ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property '担当者ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _担当者ID = value;
                    OnPropertyChanged("担当者ID");
                }
            }
        }
        private int _担当者ID;
    
        [DataMember]
        public string 画面ID
        {
            get { return _画面ID; }
            set
            {
                if (_画面ID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property '画面ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _画面ID = value;
                    OnPropertyChanged("画面ID");
                }
            }
        }
        private string _画面ID;
    
        [DataMember]
        public string GRIDID
        {
            get { return _gRIDID; }
            set
            {
                if (_gRIDID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'GRIDID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _gRIDID = value;
                    OnPropertyChanged("GRIDID");
                }
            }
        }
        private string _gRIDID;
    
        [DataMember]
        public string 列名
        {
            get { return _列名; }
            set
            {
                if (_列名 != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property '列名' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _列名 = value;
                    OnPropertyChanged("列名");
                }
            }
        }
        private string _列名;
    
        [DataMember]
        public Nullable<int> 表示順
        {
            get { return _表示順; }
            set
            {
                if (_表示順 != value)
                {
                    _表示順 = value;
                    OnPropertyChanged("表示順");
                }
            }
        }
        private Nullable<int> _表示順;
    
        [DataMember]
        public Nullable<int> 表示フラグ
        {
            get { return _表示フラグ; }
            set
            {
                if (_表示フラグ != value)
                {
                    _表示フラグ = value;
                    OnPropertyChanged("表示フラグ");
                }
            }
        }
        private Nullable<int> _表示フラグ;
    
        [DataMember]
        public Nullable<System.DateTime> 削除日付
        {
            get { return _削除日付; }
            set
            {
                if (_削除日付 != value)
                {
                    _削除日付 = value;
                    OnPropertyChanged("削除日付");
                }
            }
        }
        private Nullable<System.DateTime> _削除日付;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
